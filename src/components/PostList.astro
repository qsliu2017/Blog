---
import { type CollectionEntry } from 'astro:content';

type Props = {
	posts: CollectionEntry<'posts'>[];
};

const { posts } = Astro.props;

const postsOfYear = posts.reduce(
	(acc, post) => {
		const year = post.data.date.getFullYear();
		acc[year] = [...(acc[year] || []), post];
		return acc;
	},
	{} as Record<number, CollectionEntry<'posts'>[]>,
);

const zeroPadding = (n: number) => (n < 10 ? '0' : '') + n;
const dateString = (date: Date) => zeroPadding(date.getMonth() + 1) + '/' + zeroPadding(date.getDate());
---

<div class='flex flex-col items-stretch font-body'>
	{
		Object.entries(postsOfYear)
			.sort(([a], [b]) => Number(b) - Number(a))
			.map(([year, posts]) => (
				<>
					<h2 class='mt-3 text-xl text-gray-400'>{year}</h2>
					<hr />
					{posts
						.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
						.map(({ slug, data: { title, date } }) => (
							<div class='mt-1 flex justify-between'>
								<a class='text-lg' href={`/post/${slug}/`}>
									{title}
								</a>
								<time class='text-nowrap text-gray-400' datetime={date.toISOString()}>
									{dateString(date)}
								</time>
							</div>
						))}
				</>
			))
	}
</div>
