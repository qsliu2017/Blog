---
import { getCollection } from 'astro:content';
import Head from '../components/Head.astro';
import Footer from '../components/Footer.astro';
import { getNotes, normalizeId } from '../components/note';

export const getStaticPaths = async () => {
	const posts = await getCollection('posts');
	const tags = new Set(posts.flatMap(post => post.data.tags));
	return [
		/* post list */ { params: { list: undefined }, props: { type: 'post' } },
		/* tagged post list */ ...Array.from(tags).map(tag => ({ params: { list: `/tagged/${tag}` }, props: { type: 'post', tag } })),
		/* note list */ { params: { list: '/note' }, props: { type: 'note' } },
	];
};

const { type, tag } = Astro.props;

const navItems = [
	{ href: '/', text: 'Posts', active: type === 'post' && !tag },
	{ href: '/note', text: 'Notes', active: type === 'note' },
	...(tag ? [{ href: `/tagged/${tag}`, text: `Posts#${tag}`, active: true }] : []),
];

type Item = {
	url: string;
	title: string;
	date: Date;
};

const getNoteItems = async () => {
	const notes = await getNotes();
	return Object.entries(notes).map(([title, notes]) => ({
		url: `/note/${normalizeId(title)}/`,
		title,
		date: notes.map(note => note.data.date).reduce((a, b) => (a > b ? a : b)),
	}));
};

const getPostItems = async (tag?: string) => {
	const posts = await getCollection('posts');
	return posts
		.filter(post => !tag || post.data.tags.includes(tag))
		.map(({ slug, data: { title, date } }) => ({
			url: `/post/${slug}/`,
			title,
			date,
		}));
};

const itemsOfYear = (await (type === 'note' ? getNoteItems() : getPostItems(tag))).reduce(
	(acc, item) => {
		const year = item.date.getFullYear();
		acc[year] = [...(acc[year] || []), item];
		return acc;
	},
	{} as Record<number, Item[]>,
);

const zeroPadding = (n: number) => (n < 10 ? '0' : '') + n;
const dateString = (date: Date) => zeroPadding(date.getMonth() + 1) + '/' + zeroPadding(date.getDate());
---

<!doctype html>
<html lang='en' class='theme-ayu text-pretty'>
	<Head title={type === 'note' ? `qsliu's notes` : tag ? `#${tag} at qsliu's blog` : undefined} />
	<body class='mx-auto flex min-h-screen w-main max-w-full flex-col justify-between border-x'>
		<main class='border-y'>
			<nav>
				{
					navItems.map(({ href, text, active }) => (
						<a
							class:list={[
								'inline-block border-r px-3 py-1 text-lg',
								active ? 'bg-main text-active ' : 'text-inactive hover:bg-active hover:text-active',
							]}
							{href}
						>
							{text}
						</a>
					))
				}
			</nav>
			{
				Object.entries(itemsOfYear)
					.sort(([a], [b]) => Number(b) - Number(a))
					.map(([year, items]) => (
						<>
							<h2 class='border-y'>
								<span class='bg-main text-disabled overlay-border-b inline-block h-full border-r px-2 py-1'>{year}</span>
							</h2>
							{items
								.sort((a, b) => b.date.valueOf() - a.date.valueOf())
								.map(({ url, title, date }) => (
									<a class='bg-main hover:bg-active group flex items-baseline justify-between px-2 py-1' href={url}>
										<span class=''>{title}</span>
										<time class='text-inactive group-hover:text-active text-nowrap' datetime={date.toISOString()}>
											{dateString(date)}
										</time>
									</a>
								))}
						</>
					))
			}
		</main>
		<Footer />
	</body>
</html>
