---
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import MathJaxHead from '../components/MathJaxHead.astro';
import Nav from '../components/Nav.astro';
import { getNotes, normalizeId } from '../components/note';

export const getStaticPaths = async () => {
	const posts = await getCollection('posts');
	const tags = new Set(posts.flatMap(post => post.data.tags));
	return [
		/* post list */ { params: { list: undefined }, props: { type: 'post' } },
		/* tagged post list */ ...Array.from(tags).map(tag => ({ params: { list: `/tagged/${tag}` }, props: { type: 'post', tag } })),
		/* note list */ { params: { list: '/note' }, props: { type: 'note' } },
	];
};

const { type, tag } = Astro.props;

type Item = {
	url: string;
	title: string;
	date: Date;
};

const getNoteItems = async () => {
	const notes = await getNotes();
	return Object.entries(notes).map(([title, notes]) => ({
		url: `/note/${normalizeId(title)}/`,
		title,
		date: notes.map(note => note.data.date).reduce((a, b) => (a > b ? a : b)),
	}));
};

const getPostItems = async (tag?: string) => {
	const posts = await getCollection('posts');
	return posts
		.filter(post => !tag || post.data.tags.includes(tag))
		.map(({ slug, data: { title, date } }) => ({
			url: `/post/${slug}/`,
			title,
			date,
		}));
};

const itemsOfYear = (await (type === 'note' ? getNoteItems() : getPostItems(tag))).reduce(
	(acc, item) => {
		const year = item.date.getFullYear();
		acc[year] = [...(acc[year] || []), item];
		return acc;
	},
	{} as Record<number, Item[]>,
);

const zeroPadding = (n: number) => (n < 10 ? '0' : '') + n;
const dateString = (date: Date) => zeroPadding(date.getMonth() + 1) + '/' + zeroPadding(date.getDate());
---

<!doctype html>
<html lang='en' class='text-pretty bg-gray-50 font-body'>
	<head>
		<BaseHead />
		<MathJaxHead />
	</head>
	<body class='mx-auto flex min-h-screen w-main max-w-full flex-col justify-between'>
		<main class='px-4'>
			<Nav
				class='mt-4 font-serif'
				nav={type === 'note'
					? [{ href: '/note', text: 'Notes' }]
					: [{ href: '/', text: 'Posts' }, ...(tag ? [{ href: `/tagged/${tag}/`, text: `#${tag}` }] : [])]}
			/>
			{
				Object.entries(itemsOfYear)
					.sort(([a], [b]) => Number(b) - Number(a))
					.map(([year, items]) => (
						<>
							<h2 class='mt-4 text-xl text-gray-400'>{year}</h2>
							<hr />
							{items
								.sort((a, b) => b.date.valueOf() - a.date.valueOf())
								.map(({ url, title, date }) => (
									<div class='mt-2 flex items-baseline justify-between'>
										<a class='text-lg' href={url}>
											{title}
										</a>
										<time class='text-nowrap text-gray-400' datetime={date.toISOString()}>
											{dateString(date)}
										</time>
									</div>
								))}
						</>
					))
			}
		</main>
		<Footer />
	</body>
</html>
